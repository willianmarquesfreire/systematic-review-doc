ID Paper,Title,ID Search Session,Authors,Abstract,Status/Selection,Status/Extraction,Reading Priority,Score,Year,Journal,Keywords,Type,comment,URL,Volume,Pages,DOI,ISSN/ISBN,Importation Date,,(I) It is about SBSE using interactive optimization algorithms,(I) Features qualitative or quantitative analysis,(I) Presents an interactive approach in the optimization process,(I) It's in english or portuguese,(E) Other languages,(E) Does not have access to the full text,(E) It is not about interactive optimization in SBSE,,Research method : survey,Research method : case-study,Research method : action-research,Research method : theoretical-conceptual,Research method : secondary-study},No. of interactions with DM,Moment of first interaction with DM,Interval of interaction with DM,"The way of evaluate solutions (score, freeze, selection area, other)","Scale of score assigment (Likert, other)",There is freezing of solutions : yes,There is freezing of solutions : no},"Optimization algorithm (none, other)","Machine learning algorithm (none, other)",Input Instance Type,SE Problem,"How the evaluation is used (Objective function, ranking, other)",Experiment type : automatic,Experiment type : participant-based],Which optimization algorithm performed  better,Which ML algorithm performed better,Preferences,Optimization approach objectives : none,Optimization approach objectives : multiobjetive,Optimization approach objectives : singleobjective,Optimization approach objectives : not specified}
26108,Whither (away) Software Engineers in SBSE?,0,"Simons, Christopher L.","This challenges and open problems paper discusses the role of software engineers when combining modeling with Search-Based Software Engineering (SBSE). With SBSE techniques increasingly providing insights into difficult software modeling problems, the role of the software engineer might be thought of as diminishing. However, given the crucial role of the model understanding in SBSE, we argue that the role of the software engineer will become more important through interactive SBSE, although exploiting this interaction remains a challenge for the field.",ACCEPTED,ACCEPTED,LOW,29,2013,2013 1st International Workshop on Combining Modelling and Search-Based Software Engineering (CMSBSE),Software;Computational modeling;Unified modeling language;Software engineering;Solid modeling;Measurement;Search problems;Software Engineers;Search-Based Software Engineering;Interaction,,,,,49-50,10.1109/CMSBSE.2013.6604437,,08/16/2021,,Y,N,N,N,N,N,N,,N,N,N,Y,N,none,none,none,none,none,N,Y,none,none,none,none,none,N,N,none,none,null,Y,N,N,N
26110,A Systematic Review of Interaction in Search-Based Software Engineering,0,"RamÃ­rez, Aurora and Romero, JosÃ© RaÃºl and Simons, Christopher L.","Search-Based Software Engineering (SBSE) has been successfully applied to automate a wide range of software development activities. Nevertheless, in those software engineering problems where human evaluation and preference are crucial, such insights have proved difficult to characterize in search, and solutions might not look natural when that is the expectation. In an attempt to address this, an increasing number of researchers have reported the incorporation of the 'human-in-the-loop' during search and interactive SBSE has attracted significant attention recently. However, reported results are fragmented over different development phases, and a great variety of novel interactive approaches and algorithmic techniques have emerged. To better integrate these results, we have performed a systematic literature review of interactive SBSE. From a total of 669 papers, 26 primary studies were identified. To enable their analysis, we formulated a classification scheme focused on four crucial aspects of interactive search, i.e., the problem formulation, search technique, interactive approach, and the empirical framework. Our intention is that the classification scheme affords a methodological approach for interactive SBSE. Lastly, as well as providing a detailed cross analysis, we identify and discuss some open issues and potential future trends for the research community.",ACCEPTED,ACCEPTED,LOW,44,2019,IEEE Transactions on Software Engineering,Software;Software engineering;Search problems;Optimization;Systematics;Market research;Software metrics;Search-based software engineering;interaction;systematic literature review;optimization,,,,45,760-781,10.1109/TSE.2018.2803055,1939-3520,08/16/2021,,Y,N,N,N,N,N,N,,N,N,N,N,Y,not applicable,not applicable,not applicable,not applicable,not applicable,N,Y,not applicable,not applicable,not applicable,not applicable,not applicable,N,N,not applicable,not applicable,null,Y,N,N,N
26117,An empirical investigation of search-based computational support for conceptual software engineering design,0,"Simons, Christopher L. and Parmee, Ian C.","Conceptual software engineering design is an intensely people-oriented and non-trivial activity, yet current computational tool support is limited. While a number of search-based software engineering approaches to support software design have been reported, few empirical studies into their application have been described. This paper reports the findings of an observational study of conceptual design episodes in a UK higher education problem domain. When compared with a manual design episode, a design episode enabled by a user-interactive, search-based, evolutionary computation tool generates a large number of useful and interesting candidate designs, and provides enhanced qualitative and quantitative evaluation. It is also found that tool-supported visualization of UML class designs offers opportunities for sudden design discovery, and that designers respond positively to opportunities to explore and exploit multiple candidate designs. It appears therefore that search-based computational tool support offers high potential in the support of conceptual software engineering design.",ACCEPTED,ACCEPTED,LOW,19,2009,"2009 IEEE International Conference on Systems, Man and Cybernetics",Software engineering;Software design;Design engineering;Unified modeling language;Humans;Collaborative tools;Process design;Application software;Collaborative work;Collaborative software;evolutionary computation;software design;search;user-interaction,,,,,2503-2508,10.1109/ICSMC.2009.5346344,1062-922X,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,20 seconds,20 seconds,not specified,none,N,Y,NSGAII,not specied,UML class diagram,Conceptual Software Engineering Design,not specified,N,Y,NSGAII,none,not specified,N,Y,N,N
26119,Objective Re-weighting to Guide an Interactive Search Based Software Testing System,0,"Marculescu, Bogdan and Feldt, Robert and Torkar, Richard","Even hardware-focused industries today develop products where software is both a large and important component. Engineers tasked with developing and integrating these products do not always have a software engineering background. To ensure quality, tools are needed that automate and support software testing while allowing these domain specialists to leverage their knowledge and experience. Search-based testing could be a key aspect in creating an automated tool for supporting testing activities. However, domain specific quality criteria and trade-offs make it difficult to develop a general fitness function a priori, so interaction between domain specialists and such a tool would be critical to its success. In this paper we present a system for interactive search-based software testing and investigate a way for domain specialists to guide the search by dynamically re-weighting quality goals. Our empirical investigation shows that objective re-weighting can help a human domain specialist interactively guide the search, without requiring specialized knowledge of the system and without sacrificing population diversity.",ACCEPTED,ACCEPTED,LOW,7,2013,2013 12th International Conference on Machine Learning and Applications,Software;Software testing;Search problems;Software engineering;Context;Sociology;search based software testing;interactive search based software engineering;user centered;embedded software;industrial experience,,,,2,102-107,10.1109/ICMLA.2013.113,,08/16/2021,,Y,N,N,N,N,N,N,,N,N,N,Y,N,not specified,not specified,not specified,not specified,not specified,N,Y,not specified,not specified,not specified,Software testing,not specified,N,N,not specified,not specified,not specified,N,N,N,Y
26128,Preference-based multi-objective software modelling,0,"Mkaouer, Mohamed W. and Kessentini, Marouane and Bechikh, Slim and Tauritz, Daniel R.","In this paper, we propose the use of preference-based evolutionary multi-objective optimization techniques (P-EMO) to address various software modelling challenges. P-EMO allows the incorporation of decision maker (i.e., designer) preferences (e.g., quality, correctness, etc.) in multi-objective optimization techniques by restricting the Pareto front to a region of interest easing the decision making task. We discuss the different challenges and potential benefits of P-EMO in software modelling. We report experiments on the use of P-EMO on a well-known modeling problem where very promising results are obtained.",ACCEPTED,ACCEPTED,LOW,19,2013,2013 1st International Workshop on Combining Modelling and Search-Based Software Engineering (CMSBSE),Software;Adaptation models;Optimization;Computational modeling;Software algorithms;Measurement;Software engineering;Search-based software engineering;multi-objective optimization;user-preferences;modelling;evolutionary computation,,,,,61-66,10.1109/CMSBSE.2013.6605712,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,region of interest,none,N,Y,r-NSGAII,none,Sequence of transformation rules where each rule is represented as a binary tree,Software Modeling,Algorithm specification,Y,N,r-NSGAII,none,Distance between current objective functions and desired objective functions,N,Y,N,N
26137,Enabling Decision and Objective Space Exploration for Interactive Multi-Objective Refactoring,0,"Rebai, Soumaya and Alizadeh, Vahid and Kessentini, Marouane and Fehri, Houcem and Kazman, Rick","Due to the conflicting nature of quality measures, there are always multiple refactoring options to fix quality issues. Thus, interaction with developers is critical to inject their preferences. While several interactive techniques have been proposed, developers still need to examine large numbers of possible refactorings, which makes the interaction time-consuming. Furthermore, existing interactive tools are limited to the ""objective space"" to show developers the impacts of refactorings on quality attributes. However, the ""decision space"" is also important since developers may want to focus on specific code locations. In this paper, we propose an interactive approach that enables developers to pinpoint their preference simultaneously in the objective (quality metrics) and decision (code location) spaces. Developers may be interested in looking at refactoring strategies that can improve a specific quality attribute, such as extendibility (objective space), but they are related to different code locations (decision space). A plethora of solutions is generated at first using multi-objective search that tries to find the possible trade-offs between quality objectives. Then, an unsupervised learning algorithm clusters the trade-off solutions based on their quality metrics, and another clustering algorithm is applied to each cluster of the objective space to identify solutions related to different code locations. The objective and decision spaces can now be explored more efficiently by the developer, who can give feedback on a smaller number of solutions. This feedback is then used to generate constraints for the optimization process, to focus on the developer's regions of interest in both the decision and objective spaces. The manual validation of selected refactoring solutions by developers confirms that our approach outperforms state of the art refactoring techniques.",ACCEPTED,ACCEPTED,LOW,5,2020,IEEE Transactions on Software Engineering,Tools;Clustering algorithms;Measurement;Search problems;Manuals;Software;Space exploration;Search based software engineering;refactoring;multi-objective search;clustering,,,,,1-1,10.1109/TSE.2020.3024814,1939-3520,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,not specified,not specified,Y,N,NSGAII,not specified,not specified,Refactoring,not specified,N,N,not specified,not specified,not specified,N,Y,N,N
26141,Reducing Interactive Refactoring Effort via Clustering-Based Multi-objective Search,0,"Alizadeh, Vahid and Kessentini, Marouane","Refactoring is nowadays widely adopted in the industry because bad design decisions can be very costly and extremely risky. On the one hand, automated refactoring does not always lead to the desired design. On the other hand, manual refactoring is error-prone, time-consuming and not practical for radical changes. Thus, recent research trends in the field focused on integrating developers feedback into automated refactoring recommendations because developers understand the problem domain intuitively and may have a clear target design in mind. However, this interactive process can be repetitive, expensive, and tedious since developers must evaluate recommended refactorings, and adapt them to the targeted design especially in large systems where the number of possible strategies can grow exponentially. In this paper, we propose an interactive approach combining the use of multi-objective and unsupervised learning to reduce the developer's interaction effort when refactoring systems. We generate, first, using multi-objective search different possible refactoring strategies by finding a trade-off between several conflicting quality attributes. Then, an unsupervised learning algorithm clusters the different trade-off solutions, called the Pareto front, to guide the developers in selecting their region of interests and reduce the number of refactoring options to explore. The feedback from the developer, both at the cluster and solution levels, are used to automatically generate constraints to reduce the search space in the next iterations and focus on the region of developer preferences. We selected 14 active developers to manually evaluate the effectiveness our tool on 5 open source projects and one industrial system. The results show that the participants found their desired refactorings faster and more accurate than the current state of the art.",ACCEPTED,ACCEPTED,LOW,2,2018,2018 33rd IEEE/ACM International Conference on Automated Software Engineering (ASE),Search based software engineering;refactoring;multi-objective search;clustering,,,,,464-474,10.1145/3238147.3238217,2643-1572,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,not specified,not specified,N,Y,NSGAII,not specified,not specified,Refactoring,not specified,N,N,not specified,not specified,not specified,N,Y,N,N
26145,Interactivity in the Generation of Test Cases with Evolutionary Computation,0,"RamÃ­rez, Aurora and Delgado-PÃ©rez, Pedro and Valle-GÃ³mez, Kevin J. and Medina-Bulo, Inmaculada and Romero, JosÃ© RaÃºl","Test generation is a costly but necessary testing activity to increase the quality of software projects. Automated testing tools based on evolutionary computation principles constitute an appealing modern approach to support testing tasks. However, these tools still find difficulties to detect certain types of plausible faults in real-world projects. Besides, recent studies have shown that, in general, automatically-generated tests do not resemble those manually written and, consequently, testers are reluctant to adopt them. We observe two key issues, namely the opacity of the process and the lack of cooperation with the tester, currently hampering the acceptance of automated results. Based on these findings, we explore in this paper how the interaction between current tools and expert testers would help address the test case generation problem. More specifically, we identify a number of interaction opportunities related to the object-oriented test case design driven to boost their readability and detection power. Using EvoSuite as base implementation, we present a proof of concept focused on the possibility to integrate readability assessment of the most promising test suites into a genetic algorithm.",ACCEPTED,ACCEPTED,LOW,7,2021,2021 IEEE Congress on Evolutionary Computation (CEC),Evolutionary computation;Manuals;Tools;Software;Proposals;Test pattern generators;Object recognition;software testing;interactive search-based software engineering;test generation;mutation testing,,,,,2395-2402,10.1109/CEC45853.2021.9504786,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,not specified,not specified,N,Y,Genetic Algorithm,not specified,not specified,Software testing,not specified,N,N,not specified,not specified,not specified,N,Y,N,N
26149,Interactive metamodel/model co-evolution using unsupervised learning and multi-objective search,1,"Kessentini, W. and Alizadeh, V.","Metamodels evolve even more frequently than programming languages. This evolution process may result in a large number of instance models that are no longer conforming to the revised metamodel. On the one hand, the manual adaptation of models after the metamodels' evolution can be tedious, error-prone, and time-consuming. On the other hand, the automated co-evolution of metamodels/models is challenging, especially when new semantics is introduced to the metamodels. While some interactive techniques have been proposed, designers still need to explore a large number of possible revised models, which makes the interaction time-consuming. In this paper, we propose an interactive multi-objective approach that dynamically adapts and interactively suggests edit operations to designers based on three objectives: minimizing the deviation with the initial model, the number of non-conformities with the revised metamodel and the number of changes. The proposed approach proposes to the user few regions of interest by clustering the set of recommended co-evolution solutions of the multi-objective search. Thus, users can quickly select their preferred cluster and give feedback on a smaller number of solutions by eliminating similar ones. This feedback is then used to guide the search for the next iterations if the user is still not satisfied. We evaluated our approach on a set of metamodel/model co-evolution case studies and compared it to existing fully automated and interactive co-evolution techniques. Â© 2020 ACM.",ACCEPTED,ACCEPTED,LOW,2,2020,"Proceedings - 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems, MODELS 2020",interactive multi-objective search;  metamodel/model co-evolution;  search based software engineering,Conference Paper,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85097002386&doi=10.1145%2f3365438.3410966&partnerID=40&md5=3dc24f161f520682624fc57f5ed7316e,,68-78,10.1145/3365438.3410966,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,not specified,not specified,N,Y,NSGAII,not specified,not specified,Class diagram,not specified,N,N,not specified,not specified,not specified,N,Y,N,N
26162,Preference based multi-objective algorithms applied to the variability testing of software product lines,1,"Jakubovski Filho, H.L. and Ferreira, T.N. and Vergilio, S.R.","Evolutionary Multi-Objective Algorithms (EMOAs) have been applied to derive products for the variability testing of Software Product Lines (SPLs), which is a complex task impacted by many factors, such as the number of products to be tested, coverage criteria, and efficacy to reveal faults. But such algorithms generally produce a lot of solutions that are uninteresting to the tester. This happens because traditional search algorithms do not take into consideration the user preferences. To ease the selection of the best solutions and avoid effort generating uninteresting solutions, this work introduces an approach that applies Preference-Based Evolutionary Multi-objective Algorithms (PEMOAs) to solve the problem. The approach is multi-objective, working with the number of products to be tested, pairwise coverage and mutation score. It incorporates the preferences before the evolution process and uses the Reference Point (RP) method. Two PEMOAs are evaluated: R-NSGA-II and r-NSGA-II, using two different formulations of objectives, and three kinds of RPs. PEMOAs outperform the traditional NSGA-II by generating a greater number of solutions in the Region of Interest (ROI) associated to the RPs. The use of PEMOAs can reduce the tester's burden in the task of selecting a better and reduced set of products for SPL testing. Â© 2019 Elsevier Inc.",ACCEPTED,ACCEPTED,LOW,7,2019,Journal of Systems and Software,Preference-Based algorithms;  Search-Based software engineering;  Software product line testing,Article,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85061664081&doi=10.1016%2fj.jss.2019.02.028&partnerID=40&md5=0612a36fee4f5e275e1d01b21726d15e,151,194-209,10.1016/j.jss.2019.02.028,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,not specified,not specified,N,Y,r-NSGAII,not specified,not specified,Variability testing of SPL,not specified,N,N,not specified,not specified,not specified,N,Y,N,N
26172,Interactive multi-objective evolutionary optimization of software architectures,1,"RamÃ­rez, A. and Romero, J.R. and Ventura, S.","While working on a software specification, designers usually need to evaluate different architectural alternatives to be sure that quality criteria are met. Even when these quality aspects could be expressed in terms of multiple software metrics, other qualitative factors cannot be numerically measured, but they are extracted from the engineers know-how and prior experiences. In fact, detecting not only strong but also weak points in the different solutions seems to fit better with the way humans make their decisions. Putting the human in the loop brings new challenges to the search-based software engineering field, especially for those human-centered activities within the early analysis phase. This paper explores how the interactive evolutionary computation can serve as a basis for integrating the humans judgment into the search process. An interactive approach is proposed to discover software architectures, in which both quantitative and qualitative criteria are applied to guide a multi-objective evolutionary algorithm. The obtained feedback is incorporated into the fitness function using architectural preferences allowing the algorithm to discern between promising and poor solutions. Experimentation with real users has revealed that the proposed interaction mechanism can effectively guide the search towards those regions of the search space that are of real interest to the expert. Â© 2018 Elsevier Inc.",ACCEPTED,ACCEPTED,LOW,13,2018,Information Sciences,Interactive evolutionary computation;  Multi-objective optimization;  Search-based software design;  Software architecture discovery,Article,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049338161&doi=10.1016%2fj.ins.2018.06.034&partnerID=40&md5=a2edab20d5a6e3d23911794b53e3a175,463-464,92-109,10.1016/j.ins.2018.06.034,,08/16/2021,,Y,N,N,N,N,N,N,,Y,N,N,N,N,3,genenerations / 3,3,score,Likert,Y,N,NSGAII,KMeans++ clustering,"Component-based software arhitecture represented as a UMML 2 component diagram, encoded using a tree structure",Software architecture,objective function,Y,Y,NSGAII,none,architectural preferences,N,Y,N,N
26185,Incorporating decision makerâ€™s preferences in a multi-objective approach for the software release planning,1,"Saraiva, R. and AraÃºjo, A.A. and Dantas, A. and Yeltsin, I. and Souza, J.","Background: Release planning (RP) is one of the most complex and relevant activities in the iterative and incremental software development, because it addresses all decisions associated with the selection and assignment of requirements to releases. There are many approaches in which RP is formalized as an optimization problem. In this context, search-based software engineering (SBSE) deals with the application of search techniques to solve complex problems of software engineering. Since RP is a wicked problem with a large focus on human intuition, the decision makerâ€™s (DM) opinion is a relevant issue to be considered when solving release planning problem. Thus, we emphasize the importance in gathering the DMâ€™s preferences to guide the optimization process through search space area of his/her interests. Methods: Typically, RP is modelled as a multi-objective problem by considering to maximize overall clients satisfaction and minimize project risk. In this paper, we extend this notion and consider DMâ€™s preferences as an additional objective. The DM defines a set of preferences about the requirements allocation which is stored in a preference base responsible for influencing the search process. The approach was validated through an empirical study, which consists of two different experiments, respectively identified as (a) automatic experiment and (b) participant-based experiment. Basically, the former aims to analyze the approach using different search-based algorithms (NSGA-II, MOCell, IBEA, and SPEA-II), over artificial and real-world instances, whereas the latter aims at evaluating the use of the proposal in a real scenario composed of human evaluations. Results: The automatic experiment points out that NSGA-II obtained overall superiority in two of the three datasets investigated, positioning itself as a superior search technique for scenarios with few number of requirements and preferences, while IBEA showed to be better for larger ones (with more requirements and preferences). Regarding the participant-based experiment, it was found that two thirds of the participants evaluated the preference-based solution better than the non-preference-based one. Conclusions: The results suggest that it is feasible to investigate the approach in a real-world scenario. In addition, we made available a prototype tool in order to incorporate the humanâ€™s preferences about the requirements allocation into the solution of release planning. Â© 2017, The Author(s).",ACCEPTED,ACCEPTED,LOW,32,2017,Journal of the Brazilian Computer Society,Human preferences;  Multi-objective optimization;  Release planning;  Search-based software engineering,Article,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026754760&doi=10.1186%2fs13173-017-0060-0&partnerID=40&md5=54cb580cb25b9dd1aacb805c1060b98f,23,,10.1186/s13173-017-0060-0,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,score,1-10,N,Y,"NSGA-II, MoCell, IBEA, SPEA-II",none,"Vector of integers representing the release, that is composed of requirements xi, where xi = 1 means alocated and xi = 0 means not.",Release planning,objective function,Y,Y,NSGA-II and IBEA,none,"Coupling joint, coupling disjoint, positioning preced, follow, before, after, in, on",N,Y,N,N
26186,Incorporating user preferences in search-based software engineering: A systematic mapping study,1,"Ferreira, T.N. and Vergilio, S.R. and de Souza, J.T.","Context Search-based algorithms have been successfully applied to solve software engineering problems in the field known as Search-based Software Engineering (SBSE). However, in practice, the user may reject the obtained solutions, since many characteristics of the problem cannot be mathematically modeled. To cope with this situation, preference-based algorithms have been investigated and raised interest in the SBSE field. Objective To identify the quantity and type of research on SBSE preference-based approaches and to contribute to this new research subject, named here Preference and Search-Based Software Engineering (PSBSE), Method We conducted a systematic mapping, following a research plan to locate, assess, extract and group the outcomes from relevant studies. Results Few software engineering activities have been addressed. The most used algorithms are evolutionary and single-objective. In most studies the preferences are provided interactively and, in many cases, the user preferences are incorporated in the fitness functions. We observe a lack of evaluation measures and works comparing existing approaches. Conclusions The use of preference-based algorithms in SBSE is an underexplored subject, and many research opportunities exist. Â© 2017",ACCEPTED,ACCEPTED,LOW,55,2017,Information and Software Technology,Preference-based algorithms;  Search-based software engineering;  Systematic mapping,Review,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85019070974&doi=10.1016%2fj.infsof.2017.05.003&partnerID=40&md5=948a267dbc0c3bf1448252a0e0351bed,90,55-69,10.1016/j.infsof.2017.05.003,,08/16/2021,,Y,Y,N,N,N,N,N,,N,N,N,N,Y,not applicable,not applicable,not applicable,not applicable,not applicable,N,Y,not applicable,not applicable,not applicable,not applicable,not applicable,N,N,not applicable,not applicable,null,Y,N,N,N
26189,An Architecture based on interactive optimization and machine learning applied to the next release problem,1,"AraÃºjo, A.A. and Paixao, M. and Yeltsin, I. and Dantas, A. and Souza, J.","The next release problem (NRP) consists of selecting which requirements will be implemented in the next release of a software system. For many search based software engineering approaches to the NRP, there is still a lack of capability to efficiently incorporate human experience and preferences in the search process. Therefore, this paper proposes an architecture to deal with this issue, where the decision maker (DM) and his/her tacit assessments are taken into account during the solutions evaluations alongside the interactive genetic algorithm. Furthermore, a learning model is employed to avoid an overwhelming number of interactions. An empirical study involving software engineer practitioners, different instances, and different machine learning techniques was performed to assess the feasibility of the architecture to incorporate human knowledge in the overall optimization process. Obtained results indicate the architecture can assist the DM in selecting a set of requirements that properly incorporate his/her expertise, while optimizing other explicit measurable aspects equally important to the next release planning. On a scale of 0 (very ineffective) to 5 (very effective), all participants found the experience of interactively selecting the requirements using the approach as a 4 (effective). Â© 2016, Springer Science+Business Media New York.",ACCEPTED,ACCEPTED,LOW,28,2017,Automated Software Engineering,Interactive optimization;  Machine learning;  Next release problem;  Search based software engineering,Article,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85020054999&doi=10.1007%2fs10515-016-0200-3&partnerID=40&md5=7bea192a555f5f993c6b0f950cafb33f,24,623-671,10.1007/s10515-016-0200-3,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,50,none,none,score,1-100,N,Y,genetic algorithm,"LMS, MLP","Binary solution, where xi=1 -> requirement included, otherwise 0 = not included",next release problem,objective function,Y,Y,none,LMS on artificial data and MLP on participant-based data,"explicit (score - cost, etc) and implicit (subjective evaluation)",N,N,Y,N
26195,Incorporating user preferences in ant colony optimization for the next release problem,1,"Ferreira, T.D.N. and AraÃºjo, A.A. and BasÃ­lio Neto, A.D. and de Souza, J.T.","The selection of which requirements should be implemented in the next software release is an important and complex task in the software development process, considering the presence of budget constraints and other conflicting aspects. In this context, search based software engineering, has the main objective of applying automatic search methods to solve complex software engineering problems. However, most of these methods do not consider human expertise during the search, especially due to the difficulty in mathematically modeling the user's preferences. Consequently, the user can present some resistance or place little confidence in the final results, given that his/her knowledge and domain expertise was not properly considered in the solution construction. This paper aims at proposing an interactive model for the next release problem using ant colony optimization, where the user can define which requirements he/she would like to include or not in the next release. Employing humans and a simulator, an empirical study was performed that considers real-world and artificial instances. The achieved results demonstrate that the loss of score was, on average, 12% when it was compared with a solution with no human intervention. On the other hand, the algorithm generates solutions that have more than 80% of the met preferences, as defined by the users. Furthermore, the results showed that ACO can be an interesting choice as an interactive search engine, given the low quantity of interactions that are required to reach good solutions. Â© 2016 Elsevier B.V.",ACCEPTED,ACCEPTED,LOW,27,2016,Applied Soft Computing Journal,Ant colony optimization;  Interactive optimization;  Next release problem;  Search based software engineering,Article,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84979684914&doi=10.1016%2fj.asoc.2016.06.027&partnerID=40&md5=d989e332ade4a9bf5de40798cf8e2cec,49,1283-1296,10.1016/j.asoc.2016.06.027,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,none,10 iterations,every 10 iterations,score,"-1 (requirement should not be in the next release), 0 (no opinion), 1 (requirement should be)",N,Y,ant colony,none,binary,next release,objective function,Y,Y,none,none,score and requirement should or not be in the next release,N,N,Y,N
26208,Interactive software release planning with preferences base,1,"Dantas, A. and Yeltsin, I. and AraÃºjo, A.A. and Souza, J.","The release planning is a complex task in the software development process and involves many aspects related to the decision about which requirements should be allocated in each system release. Several search based techniques have been proposed to tackle this problem, but in most cases the human expertise and preferences are not effectively considered. In this context, this work presents an approach in which the search is guided according to a Preferences Base supplied by the user. Preliminary empirical results showed the approach is able to find solutions which satisfy the most important user preferences. Â© Springer International Publishing Switzerland 2015.",ACCEPTED,ACCEPTED,LOW,7,2015,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),Interactive Genetic Algorithm;  Release planning;  SBSE,Conference Paper,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84951320256&doi=10.1007%2f978-3-319-22183-0_32&partnerID=40&md5=fe6580bb367201b1be9b0d6c861e382d,9275,341-346,10.1007/978-3-319-22183-0_32,,08/16/2021,,Y,N,N,N,N,N,N,,N,N,N,Y,N,not specified,not specified,not specified,not specified,not specified,N,Y,not specified,not specified,not specified,Software release planning,not specified,N,N,not specified,not specified,not specified,N,N,N,Y
26219,Machine learning for user modeling in an interactive genetic algorithm for the next release problem,1,"AraÃºjo, A.A. and PaixÃ£o, M.","The Next Release Problem consists in selecting which requirements will be implemented in the next software release. For many SBSE approaches to the NRP, there is still a lack of ability to efficiently include the human opinion and its peculiarities in the search process. Most of these difficulties are due to the problem of the human fatigue. Thus, it is proposed the use of a machine learning technique to model the user and replace him in an Interactive Genetic Algorithm to the NRP. Intermediate results are able to show that an IGA can succesfully incorporate the user preferences in the final solution. Â© 2014 Springer International Publishing Switzerland.",ACCEPTED,ACCEPTED,LOW,18,2014,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),Interactive Genetic Algorithm;  Machine Learning;  Next Release Problem;  Search Based Software Engineering,Conference Paper,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84958541574&partnerID=40&md5=75ae8283e85fd3a749994f26994ad920,8636 LNCS,228-233,,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,score,1-100,N,Y,Interactive genetic algorithm,not specified,"Binary solution, where xi=1 -> requirement included, otherwise 0 = not included",next release problem,objective function,Y,N,Interactive genetic algorithm,not specified,"explicit (score - cost, etc) and implicit (subjective evaluation)",N,N,Y,N
26221,OPTI-SELECT: An interactive tool for user-in-the-loop feature selection in software product lines,1,"El Yamany, A.E. and Shaheen, M. and Sayyad, A.S.","Opti-Select is an Interactive Multi-objective feature analysis and optimization tool for software product lines configuration and feature models optimization based on an innovative UIL (User-In-the-loop) idea. In this tool, the experience of system analysts and stakeholders are merged with optimization techniques and algorithms. Opti-Select interactive tool is an integrated set of techniques providing step by step feature model and attribute configuration, selecting and excluding features, solution set optimization, and user interaction utilities that can all together reach satisfactory set of solutions that fits stakeholder preferences. Copyright is held by the owner/author(s).",ACCEPTED,ACCEPTED,LOW,18,2014,ACM International Conference Proceeding Series,Feature models;  Multi-objective optimization;  Optimal feature selection;  Search-based software engineering;  Software product lines;  User-in-the-loop (UIL),Conference Paper,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84907860169&doi=10.1145%2f2647908.2655977&partnerID=40&md5=2b5879bbe375bbe3b7a73c28d785393c,2,126-129,10.1145/2647908.2655977,,08/16/2021,,Y,N,N,N,N,N,N,,N,N,N,Y,N,Decided by DM,After seconds decided by DM,After seconds decided by DM,Selection of features to include or exclude,none,N,Y,IBEA,none,Simple XML Feature Model (SXFM),Loop Feature Selection in Software Product Lines,objective function,N,N,none,none,Features to be included and excluded,N,Y,N,N
26224,Preference-based many-objective evolutionary testing generates harder test cases for autonomous agents,1,"Kalboussi, S. and Bechikh, S. and Kessentini, M. and Ben Said, L.","Despite the high number of existing works in software testing within the SBSE community, there are very few ones that address the problematic of agent testing. The most prominent work in this direction is by Nguyen et al. [13], which formulates this problem as a bi-objective optimization problem to search for hard test cases from a robustness viewpoint. In this paper, we extend this work by: (1) proposing a new seven-objective formulation of this problem and (2) solving it by means of a preference-based many-objective evolutionary method. The obtained results show that our approach generates harder test cases than Nguyen et al. method ones. Moreover, Nguyen et al. method becomes a special case of our method since the user can incorporate his/her preferences within the search process by emphasizing some testing aspects over others. Â© 2013 Springer-Verlag.",ACCEPTED,ACCEPTED,LOW,8,2013,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),Agent testing;  many-objective optimization;  user's preferences,Conference Paper,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84884966250&doi=10.1007%2f978-3-642-39742-4_19&partnerID=40&md5=98aa006e07e1052351c487a818ebeefd,8084 LNCS,245-250,10.1007/978-3-642-39742-4_19,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,not specified,not specified,Y,N,not specified,not specified,not specified,Test generating,not specified,N,N,not specified,not specified,not specified,N,Y,N,N
26226,Practitioner-oriented visualization in an interactive search-based software test creation tool,1,"Marculescu, B. and Feldt, R. and Torkar, R.","Search-based software testing uses meta-heuristic search techniques to automate or partially automate testing tasks, such as test case generation or test data generation. It uses a fitness function to encode the quality characteristics that are relevant, for a given problem, and guides the search to acceptable solutions in a potentially vast search space. From an industrial perspective, this opens up the possibility of generating and evaluating lots of test cases without raising costs to unacceptable levels. First, however, the applicability of search-based software engineering in an industrial setting must be evaluated. In practice, it is difficult to develop a priori a fitness function that covers all practical aspects of a problem. Interaction with human experts offers access to experience that is otherwise unavailable and allows the creation of a more informed and accurate fitness function. Moreover, our industrial partner has already expressed a view that the knowledge and experience of domain specialists are more important to the overall quality of the systems they develop than software engineering expertise. In this paper we describe our application of Interactive Search Based Software Testing (ISBST) in an industrial setting. We used SBST to search for test cases for an industrial software module and based, in part, on interaction with a human domain specialist. Our evaluation showed that such an approach is feasible, though it also identified potential difficulties relating to the interaction between the domain specialist and the system. Â© 2013 IEEE.",ACCEPTED,ACCEPTED,LOW,9,2013,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC",,Conference Paper,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84897378753&doi=10.1109%2fAPSEC.2013.120&partnerID=40&md5=ec34f0cc10950c7054cd6ee104d043a8,2,87-92,10.1109/APSEC.2013.120,,08/16/2021,,Y,N,N,N,N,N,N,,N,N,N,Y,N,not specified,not specified,not specified,re-weighting objective function,not specified,N,Y,not specified,not specified,not specified,Software Testing,selection and re-weighting of objective functions,N,N,not specified,not specified,not specified,N,N,N,Y
26230,Interactive requirements prioritization using a genetic algorithm,1,"Tonella, P. and Susi, A. and Palma, F.","Context: The order in which requirements are implemented affects the delivery of value to the end-user, but it also depends on technical constraints and resource availability. The outcome of requirements prioritization is a total ordering of requirements that best accommodates the various kinds of constraints and priorities. During requirements prioritization, some decisions on the relative importance of requirements or the feasibility of a given implementation order must necessarily resort to a human (e.g., the requirements analyst), possessing the involved knowledge. Objective: In this paper, we propose an Interactive Genetic Algorithm (IGA) that includes incremental knowledge acquisition and combines it with the existing constraints, such as dependencies and priorities. We also assess the performance of the proposed algorithm. Method: The validation of IGA was conducted on a real case study, by comparing the proposed algorithm with the state of the art, interactive prioritization technique Incomplete Analytic Hierarchy Process (IAHP). Results: The proposed method outperforms IAHP in terms of effectiveness, efficiency and robustness to decision maker errors. Conclusion: IGA produces a good approximation of the reference requirements ranking, requiring an acceptable manual effort and tolerating a reasonable human error rate. Â© 2012 Elsevier B.V. All rights reserved.",ACCEPTED,ACCEPTED,LOW,15,2013,Information and Software Technology,Interactive genetic algorithms;  Requirements prioritization;  Search based software engineering,Conference Paper,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84867399958&doi=10.1016%2fj.infsof.2012.07.003&partnerID=40&md5=9362769a97528a8088b9d7b69be96fe6,55,173-187,10.1016/j.infsof.2012.07.003,,08/16/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,sort,none,N,Y,Interactive Genetic Algorithm,none,graph representing requirements with priority and dependences,requirements priorization,ranking,N,N,Interactive Genetic Algorithm,none,priority,N,Y,N,N
26232,A concept for an interactive search-based software testing system,1,"Marculescu, B. and Feldt, R. and Torkar, R.","Software is an increasingly important part of various products, although not always the dominant component. For these software-intensive systems it is common that the software is assembled, and sometimes even developed, by domain specialists rather than by software engineers. To leverage the domain specialists' knowledge while maintaining quality we need testing tools that require only limited knowledge of software testing. Since each domain has unique quality criteria and trade-offs and there is a large variation in both software modeling and implementation syntax as well as semantics it is not easy to envisage general software engineering support for testing tasks. Particularly not since such support must allow interaction between the domain specialists and the testing system for iterative development. In this paper we argue that search-based software testing can provide this type of general and interactive testing support and describe a proof of concept system to support this argument. The system separates the software engineering concerns from the domain concerns and allows domain specialists to interact with the system in order to select the quality criteria being used to determine the fitness of potential solutions. Â© 2012 Springer-Verlag.",ACCEPTED,ACCEPTED,LOW,10,2012,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),interactive search-based software engineering;  search-based software testing;  user centered,Conference Paper,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84866644612&doi=10.1007%2f978-3-642-33119-0_21&partnerID=40&md5=30678e939bfdce884fdfa11e254153b4,7515 LNCS,273-278,10.1007/978-3-642-33119-0_21,,08/16/2021,,Y,N,N,N,N,N,N,,N,N,N,Y,N,not specified,not specified,not specified,re-weighting objective function,not specified,N,Y,not specified,not specified,not specified,Software Testing,objective function,N,N,not specified,not specified,selection and re-weighting of objective functions,N,N,N,Y
26240,Evolving colors in user interfaces by interactive genetic algorithm,1,"Birtolo, C. and Pagano, P. and Troiano, L.","Color selection in designing user interfaces is addressed by an Interactive Genetic Algorithm. The proposed approach is aimed at finding the optimal trade-off between different and sometimes conflicting constraints, without any explicit model of user preferences and abilities. Experimentation investigates the algorithm convergence under several conditions and user behavior. Â©2009 IEEE.",ACCEPTED,ACCEPTED,LOW,15,2009,"2009 World Congress on Nature and Biologically Inspired Computing, NABIC 2009 - Proceedings",Accessibility;  Color vision;  Interactive genetic algorithms;  Search based software engineering;  User interface design,Conference Paper,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949644937&doi=10.1109%2fNABIC.2009.5393307&partnerID=40&md5=1b972c68ea5edc9b768a49e36e974c36,,349-355,10.1109/NABIC.2009.5393307,,08/16/2021,,Y,N,N,N,N,N,N,,Y,N,N,N,N,not specified,not specified,not specified,the DM assign if pallete is fine or not,none,Y,N,interactive genetic algorithm,cluster algorithm,bit string,Colors in User Interfaces,fitness,Y,N,not specified,not specified, if pallete is fine or not,Y,N,N,N
28364,Towards the Support of User Preferences in Search-Based Product Line Architecture Design: An Exploratory Study,2,"Bindewald, Carlos Vinicius and Freire, Willian M. and Amaral, Aline M. M. Miotto and Colanzi, Thelma Elita","Software Product Lines (SPLs) is a reuse approach in which a family of products isgeneralized in a common architecture that can be adapted to different clients. TheProduct Line Architecture (PLA) is one of the most important artifacts of a SPL. PLAdesign requires great human effort as it involves several factors that are usuallyin conflict. To ease this task, PLA design can be formulated as an optimization problemwith many factors, i.e, as a multi-objective optimization problem. In this context,the MOA4PLA approach was proposed to optimize PLA design using search algorithms andmetrics specific to the context. This approach supported by OPLA-Tool has alreadybeen used in several works demonstrating its applicability. However, MOA4PLA doesnot take into account aspects that are subjective, such as the preferences of a particularDecision Maker (DM). To do so, this paper presents a proposal to incorporate the userpreferences in the optimization process performed by MOA4PLA, through an interactiveprocess in which the DM subjectively evaluates the solutions in processing time. Thus,the solutions generated can be better suited to the DM's needs or preferences. Inorder to allow the user interaction, modifications were made in MOA4PLA and implementedin the OPLA-Tool. Aiming at an initial validation of the proposal, an exploratorystudy was carried out, composed of two experiments: a qualitative and a quantitative.These experiments were realized with the participation of a software architect. Empiricalresults pointed out that the proposed interactive process enables the generation ofPLAs that are in accordance with the architect's preferences. Another significantcontribution are the lessons learned on how to improve the interactive process.",ACCEPTED,ACCEPTED,LOW,19,2019,Proceedings of the XXXIII Brazilian Symposium on Software Engineering,"Multi-Objective Optimization, Human-computer interaction, Product Line Architecture",,,https://doi.org/10.1145/3350768.3351993,,387â€“396,10.1145/3350768.3351993,9781450376518,08/18/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,3,3,3,score,Likert,Y,N,NSGAII,MLP,Object representing Product Line Architecture,Product Line Architecture,"when solution eval. = 1, solution is removed; eval. = 5, solution is freezed; otherwise, solution return to optimization process",N,Y,NSGAII,MLP,Opinion about PLA,N,Y,N,N
28371,Supporting User Preferences in Search-Based Product Line Architecture Design Using Machine Learning,2,"Bindewald, Carlos Vinicius and Freire, Willian M. and Amaral, Aline M. M. Miotto and Colanzi, Thelma Elita","The Product Line Architecture (PLA) is one of the most important artifacts of a SoftwareProduct Line. PLA design requires intensive human effort as it involves several conflictingfactors. In order to support this task, an interactive search-based approach, automatedby a tool named OPLA-Tool, was proposed in a previous work. Through this tool thesoftware architect evaluates the generated solutions during the optimization process.Considering that evaluating PLA is a complex task and search-based algorithms demanda high number of generations, the evaluation of all solutions in all generations causehuman fatigue. In this work, we incorporated in OPLA-Tool a Machine Learning (ML)model to represent the architect in some moments during the optimization process aimingto decrease the architect's effort. Through the execution of a quantiqualitative exploratorystudy it was possible to demonstrate the reduction of the fatigue problem and thatthe solutions produced at the end of the process, in most cases, met the architect'sneeds.",ACCEPTED,ACCEPTED,LOW,11,2020,"Proceedings of the 14th Brazilian Symposium on Software Components, Architectures, and Reuse","Machine Learning, Product Line Architecture, Human-computer interaction",,,https://doi.org/10.1145/3425269.3425278,,11â€“20,10.1145/3425269.3425278,9781450387545,08/18/2021,,Y,N,N,N,N,N,N,,Y,N,N,N,N,3,3,3,score,Likert,Y,N,NSGAII,MLP,Object representing PLA,PLA,1 remove solution 5 freeze,Y,Y,NSGAII,MLP,opinion about PLA,N,Y,N,N
28396,Multiple Objective Test Set Selection for Software Product Line Testing: Evaluating Different Preference-Based Algorithms,2,"Filho, Helson Luiz Jakubovski and Ferreira, Thiago Nascimento and Vergilio, Silvia Regina","The selection of optimal test sets for Software Product Lines (SPLs) is a complextask impacted by many factors and that needs to consider the tester's preferences.To help in this task, Preference-based Evolutionary Multi-objective Algorithms (PEMOAs)have been explored. They use a Reference Point (RP), which represents the user preferenceand guides the search, resulting in a greater number of solutions in the ROI (Regionof Interest). This region contains solutions that are more interesting from the tester'spoint of view. However, the explored PEMOAs have not been compared yet and the resultsreported in the literature do not consider many-objective formulations. Such an evaluationis important because in the presence of more than three objectives the performanceof the algorithms may change and the number of solutions increases. Considering thisfact, this work presents evaluation results of four PEMOAs for selection of productsin the SPL testing considering cost, testing criteria coverage, products similarity,and the number of revealed faults, given by the mutation score. The PEMOAs presentbetter performance than traditional algorithms, avoiding uninteresting solutions.We introduce a hyper-heuristic version of the PEMOA R-NSGA-II that presents the bestresults in a general case.",ACCEPTED,ACCEPTED,LOW,7,2018,Proceedings of the XXXII Brazilian Symposium on Software Engineering,"preference-based multi-objective algorithms, search-based software engineering, software product line testing",,,https://doi.org/10.1145/3266237.3266275,,162â€“171,10.1145/3266237.3266275,9781450365031,08/18/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,not specified,not specified,N,Y,r-NSGAII,not specified,not specified,Test Selection,not specified,N,N,not specified,not specified,not specified,N,Y,N,N
28467,Integrating the Designer In-the-Loop for Metamodel/Model Co-Evolution via Interactive Computational Search,2,"Kessentini, Wael and Wimmer, Manuel and Sahraoui, Houari","Metamodels evolve even more frequently than programming languages. This evolutionprocess may result in a large number of instance models that are no longer conformingto the revised meta-model. On the one hand, the manual adaptation of models afterthe metamodels' evolution can be tedious, error-prone, and time-consuming. On theother hand, the automated co-evolution of metamodels/models is challenging especiallywhen new semantics is introduced to the metamodels. In this paper, we propose an interactivemulti-objective approach that dynamically adapts and interactively suggests edit operationsto developers and takes their feedback into consideration. Our approach uses NSGA-IIto find a set of good edit operation sequences that minimizes the number of conformanceerrors, maximizes the similarity with the initial model (reduce the loss of information)and minimizes the number of proposed edit operations. The designer can approve, modify,or reject each of the recommended edit operations, and this feedback is then usedto update the proposed rankings of recommended edit operations. We evaluated our approachon a set of metamodel/model coevolution case studies and compared it to fully automatedcoevolution techniques.",ACCEPTED,ACCEPTED,LOW,6,2018,Proceedings of the 21th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems,"Coupled Evolution, Search Based Software Engineering, Metamodel/Model Co-Evolution, Interactive Optimization",,,https://doi.org/10.1145/3239372.3239375,,101â€“111,10.1145/3239372.3239375,9781450349499,08/18/2021,,Y,N,N,N,N,N,N,,N,Y,N,N,N,not specified,not specified,not specified,not specified,not specified,N,Y,NSGAII,not specified,not specified,Class diagram,not specified,N,N,not specified,not specified,not specified,N,Y,N,N
28479,OPLA-Tool v2.0: A Tool for Product Line Architecture Design Optimization,2,"Freire, Willian Marques and Massago, Mamoru and Zavadski, Arthur Cattaneo and Malachini, Aline Maria and Amaral, Miotto and Colanzi, Thelma Elita","The Multi-objective Optimization Approach for Product Line Architecture Design (MOA4PLA)is the seminal approach that successfully optimizes Product Line Architecture (PLA)design using search algorithms. The tool named OPLA-Tool was developed in order toautomate the use of MOA4PLA. Over time, the customization of the tool to suit theneeds of new research and application scenarios led to several problems. The mainproblems identified in the original version of OPLA-Tool are environment configuration,maintainability and usability problems, and PLA design modeling and visualization.Such problems motivated the development of a new version of this tool: OPLA-Tool v2.0,presented in this work. In this version, those problems were solved by the sourcecode refactoring, migration to a web-based graphical user interface (GUI) and inclusionof a new support tool for PLA modeling and visualization. Furthermore, OPLA-Tool v2.0has new functionalities, such as new objective functions, new search operators, intelligentinteraction with users during the optimization process, multi-user authenticationand simultaneous execution of several experiments to PLA optimization. Such a newversion of OPLA-Tool is an important achievement to PLA design optimization as itprovides an easier and more complete way to automate this task.",ACCEPTED,ACCEPTED,LOW,17,2020,Proceedings of the 34th Brazilian Symposium on Software Engineering,"product line architecture, Software product line, multi-objective evolutionary algorithms",,,https://doi.org/10.1145/3422392.3422498,,818â€“823,10.1145/3422392.3422498,9781450387538,08/18/2021,,Y,N,N,N,N,N,N,,N,N,N,Y,N,specified by user,specified by user,specified by user,score,Likert,Y,N,none,none,Object representing PLA,PLA,score 1 remove solution and 5 mantain immutable,N,N,none,none,score and freeze,N,Y,N,N
28752,Metaheuristic Design Pattern: Preference,2,"Aljawawdeh, Hamzeh J. and Simons, Christopher L. and Odeh, Mohammed","In interactive metaheuristic search, the human helps to steer the trajectory of thesearch by providing qualitative evaluation to assist in the selection of solutionindividuals. It can be challenging to design mechanisms to exploit human qualitativeevaluation taking into account human trade-off judgments among competing criteriaand implicit knowledge and experience. This paper addresses this challenge by proposingthe Preference metaheuristic design pattern involving six abstractions across twodimensions: explicit and implicit knowledge and a priori, interactive and a posterioritimings.",ACCEPTED,ACCEPTED,LOW,0,2015,Proceedings of the Companion Publication of the 2015 Annual Conference on Genetic and Evolutionary Computation,"preference, interactive metaheuristic search, design patterns",,,https://doi.org/10.1145/2739482.2768498,,1257â€“1260,10.1145/2739482.2768498,9781450334884,08/18/2021,,Y,N,N,N,N,N,N,,Y,N,N,N,N,not specified,not specified,not specified,not specified,not specified,N,Y,not specified,not specified,not specified,not specified,not specified,N,N,not specified,not specified,not specified,N,N,N,Y
48675,Qualitative optimization in software engineering: A short survey,3,Ganesh Ram Santhanam,"Many software engineering problems involve finding optimal solutions from a set of feasible solutions. Such methods often require stakeholders such as developers and testers to specify preferences over multiple attributes/objectives that are to be optimized. However, in many cases it is more natural for stakeholders to express such preferences in simple, qualitative terms. We survey relevant literature within software engineering for problems in which qualitative optimization techniques can be useful. We also present a model of optimization that relies on the stakeholders qualitative preferences leveraging recent advances in decision theoretic artificial intelligence, which could prove useful and spawn connections between qualitative decision theory and software engineering.",ACCEPTED,ACCEPTED,LOW,31,2016,Journal of Systems and Software,"Qualitative optimization, Search-based software engineering, Decision-support, Preferences",,,https://www.sciencedirect.com/science/article/pii/S0164121215002022,111,149-156,https://doi.org/10.1016/j.jss.2015.09.001,0164-1212,08/31/2021,,Y,N,N,N,N,N,N,,Y,N,N,N,N,none,none,none,none,none,N,Y,none,none,none,none,none,N,N,none,none,null,Y,N,N,N
48783,Chapter Four - Preference Incorporation in Evolutionary Multiobjective Optimization: A Survey of the State-of-the-Art,3,Slim Bechikh and Marouane Kessentini and Lamjed Ben Said and Khaled GhÃ©dira,"After using Evolutionary Algorithms (EAs) for solving multiobjective optimization problems for more than two decades, the incorporation of the decision maker's (DMâ€™s) preferences within the evolutionary process has finally become an active research area. In fact, EAs have demonstrated their effectiveness and efficiency in providing a well-converged and well-distributed approximation of the Pareto front. However, in reality, the DM is not interested in discovering the whole Pareto front rather than approximating the portion of the front that best matches his/her preferences, i.e., the Region Of Interest. For this reason, many new preference-based Multiobjective Optimization EAs (MOEAs), which are mostly variations of existing methods, have been recently published in the specialized literature. The purpose of this chapter is to summarize and organize the information on these current approaches in an attempt to motivate researchers to further focus on hybridizing between decision making and evolutionary multiobjective optimization research fields; consequently facilitating the DM's task when selecting the final alternative to realize. Hence, a summary of the main preference-based MOEAs is provided together with a brief criticism that includes their pros and cons. Furthermore, we propose a classification of such type of algorithms based on the DM's preference information structure. Finally, the future trends in this research area and some possible paths for future research are outlined.",ACCEPTED,ACCEPTED,LOW,24,2015,,"Multiobjective optimization, Evolutionary Algorithms, Decision maker's preferences, Decision making",,,https://www.sciencedirect.com/science/article/pii/S0065245815000273,98,141-207,https://doi.org/10.1016/bs.adcom.2015.03.001,0065-2458,08/31/2021,,Y,N,N,N,N,N,N,,Y,N,N,N,N,none,none,none,none,none,N,Y,none,none,none,none,none,N,N,none,none,none,Y,N,N,N
